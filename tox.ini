# SPDX-License-Identifier: Apache-2.0

[tox]
envlist = ruff, lint, mypy, py3-unit
minversion = 4.4

[testenv]
description = run tests
package = wheel
wheel_build_env = pkg
deps =
    pytest
install_command = pip install \
                  -c constraints-dev.txt \
                  {opts} {packages}

[testenv:py3]
basepython = python3.11

[testenv:py3-unit]
description = run unit tests with pytest
passenv =
	HF_HOME
	INSTRUCTLAB_NCCL_TIMEOUT_MS
	CMAKE_ARGS

# Use PyTorch CPU build instead of CUDA build in test envs. CUDA dependencies
# are huge. This reduces venv from 5.7 GB to 1.5 GB.
setenv =
    PIP_EXTRA_INDEX_URL=https://download.pytorch.org/whl/cpu
    CMAKE_ARGS={env:CMAKE_ARGS:-DGGML_NATIVE=off}
deps = 
    -r requirements-dev.txt
commands = {envpython} -m pytest tests/unit {posargs}
# NOTE: {posargs} is a placeholder for input positional arguments
# such as `tox -e py3-unit -- --pdb` if we wanted to run pytest with pdb enabled.
# `--` delimits flags that are meant for tox vs. those that are positional arguments for
# the command that's being run in the environment.

[testenv:py3-smoke]
description = run accelerated smoke tests with pytest
passenv =
	HF_HOME
        INSTRUCTLAB_NCCL_TIMEOUT_MS
deps = 
    -r requirements-dev.txt
    -r requirements-cuda.txt
commands = {envpython} -m pytest tests/smoke {posargs}

# format, check, and linting targets don't build and install the project to
# speed up testing.
[testenv:lint]
description = lint with pylint
basepython = {[testenv:py3]basepython}
skip_install = true
skipsdist = true
deps = -r requirements-dev.txt
commands =
    {envpython} -m pylint --load-plugins pylint_pydantic src/instructlab/training/

[testenv:fastlint]
description = fast lint with pylint (without 3rd party modules)
basepython = {[testenv:py3]basepython}
skip_install = true
skipsdist = true
deps =
    pylint
    pylint-pydantic
commands =
    {envpython} -m pylint --load-plugins pylint_pydantic {posargs:--disable=import-error src/instructlab/training/}

[testenv:ruff]
description = reformat and fix code with Ruff (and isort)
basepython = {[testenv:py3]basepython}
skip_install = True
skipsdist = true
# keep in sync with .pre-commit-config.yaml
deps =
    ruff
    isort
# supports 'fix', 'check', or abitrary args to 'ruff' command
commands =
    ./scripts/ruff.sh {posargs:fix}
allowlist_externals = ./scripts/ruff.sh

[testenv:tomllint]
description = lint and format pyproject.toml
skip_install = true
skipsdist = true
deps =
commands =
    make toml-lint
    make toml-fmt
    sh -c 'git diff --exit-code || (echo "pyproject.toml formatting is incorrect. Please run \"make toml-fmt\" and commit the changes." && exit 1)'
allowlist_externals = make, sh

[testenv:mypy]
description = Python type checking with mypy
basepython = {[testenv:py3]basepython}
skip_install = true
skipsdist = true
deps =
  mypy
  types-tqdm
  types-PyYAML
  pytest
commands =
  mypy {posargs:src}

[testenv:fix]
description = reformat and fix violations with ruff
basepython = {[testenv:py3]basepython}
skip_install = true
skipsdist = true
deps = {[testenv:ruff]deps}
commands =
    ruff check {posargs:--fix}
    ruff format .
    isort .

# Used by `update-constraints` `ci-actions` reusable action, see:
# https://github.com/instructlab/ci-actions/blob/main/actions/update-constraints/update-constraints.md
#
# To re-generate the constraints file locally, run:
# `tox -e constraints -- ./ci-actions/update-constraints/generate_constraints.sh`
[testenv:constraints]
description = Generate new constraints file(s)
basepython = {[testenv:py3]basepython}
skip_install = True
skipsdist = true
deps =
    uv==0.7.8
    torch # work around flash-attn not listing its build dependencies in package metadata
commands = {posargs}
allowlist_externals = *
